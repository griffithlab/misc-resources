#!/usr/bin/env genome-perl
#Written by Obi L. Griffith & Malachi Griffith

#Purpose:
#This script queries the clinicalTrials.gov website using a list of gene names
#Each query will be submitted by URL crafting
#The result will be an autogenerated XML file listing the clinical trials that match the search term
#Each match in the result will contain the clinical trial ID and a score for the match
#This script will parse the critical information out and store Gene-to-ClinicalTrial interactions along with their score for future use
#The queries will be restricted to interventional study types with drug treatments

use strict;
use warnings;
use Term::ANSIColor qw(:constants);
use Getopt::Long;
use Data::Dumper;
use XML::Simple;
use LWP;
use above 'Genome';
use Genome::Model::ClinSeq::Util qw(:all);

binmode(STDOUT, ":utf8");
use Cwd 'abs_path';
my $lib_dir;
BEGIN{
  if (abs_path($0) =~ /(.*\/).*\/.*\.pl/){
    $lib_dir = $1."/druggenes";
  }
}
use lib $lib_dir;
use utility qw(:all);

my $annotation_dir = '';
my $outdir = '';
my $result_summary_file = '';
my $debug = '';
my $record_limit = '';
my $verbose = '';
my $restart = '';
my $blacklist_file = '';

GetOptions ('annotation_dir=s'=>\$annotation_dir, 'outdir=s'=>\$outdir, 'summary=s'=>\$result_summary_file, 'blacklist=s'=>\$blacklist_file, 'debug=s'=>\$debug, 'record_limit=i'=>\$record_limit, 'verbose=i'=>\$verbose, 'restart=i'=>\$restart);

my $usage=<<INFO;

  Example usage: 
  
  queryClinTrialsGovXml.pl  --annotation_dir=/gscmnt/sata132/techd/mgriffit/reference_annotations/  --outdir=/gscmnt/sata132/techd/mgriffit/DruggableGenes/KnownDruggable/ClinicalTrialsGov/interactions/ --blacklist=/gscmnt/sata132/techd/mgriffit/DruggableGenes/KnownDruggable/ClinicalTrialsGov/keyword_blacklist.txt --summary=query_results_summary.txt --debug=1 --record_limit=3 --restart=1

  Details:
  --annotation_dir            PATH.  Directory containing gene info for gene name mapping ('gene2accession' and 'gene_info')
  --outdir                    PATH.  Directory to store interaction flatfiles generated by parsing the XML files
  --summary		      FILE.  File to store summary of results from all queries
  --blacklist                 PATH.  Path to file of gene terms to be blacklisted (not used as queries)
  --debug                     INT.   Testing purposes
  --record_limit              INT.   Only process this many records 
  --verbose                   INT.   More output
  --restart		      INT.   Restart where existing result file ends (make sure end of file is clean)
INFO

unless ($annotation_dir && $outdir && $result_summary_file){
  print GREEN, "\n\n$usage\n\n", RESET;
  exit();
}
unless($record_limit){
  $record_limit = 1;
}

$annotation_dir = &checkDir('-dir'=>$annotation_dir, '-clear'=>"no");
$outdir = &checkDir('-dir'=>$outdir, '-clear'=>"no");
my $summary_path="$outdir"."$result_summary_file";

#Load blacklist if provided
my %blacklist;
if ($blacklist_file){
 print BLUE, "\n\nLoading blacklist file: $blacklist_file\n", RESET;
 open (BLACKLIST, "$blacklist_file") or die "can't find specified: $blacklist_file\n";
 while (<BLACKLIST>){
  chomp;
  $blacklist{$_}++;
 }
 close BLACKLIST;
}

#Load existing result file, capture list of existing query terms to skip and then reopen the file for appending results
my %existing;
if ($restart){
 print BLUE, "\n\nLoading existing query results to avoid repeat from: $summary_path\n", RESET;
 open (RESTART, "$summary_path") or die "can't find existing file for restart: $summary_path\n";
 while (<RESTART>){
  my @data = split("\t",$_);
  $existing{$data[0]}{$data[1]}++;
 }
 close RESTART;
 open(SUMMARY, ">>$summary_path") or die "can't open $summary_path for write\n";
}else{
 #Create new summary result file 
 open(SUMMARY, ">$summary_path") or die "can't open $summary_path for write\n";
}
binmode(SUMMARY, ":utf8");

#Get annotation gene names and synonyms
print BLUE, "\n\nLoading gene annotation data from: $annotation_dir\n", RESET;
my $annotation_data = &loadEntrezEnsemblData();
my $entrez_symbols = $annotation_data->{'symbols'};
my $entrez_synonyms = $annotation_data->{'synonyms'};
my @entrez_symbols = sort keys %{$entrez_symbols};
my @entrez_synonyms = sort keys %{$entrez_synonyms};
my %Genes;

#First, obtain list of entrez symbols and their corresponding ids
foreach my $entrez_symbol (@entrez_symbols){
 my @entrez_ids = keys %{$entrez_symbols->{$entrez_symbol}->{entrez_ids}};
 #Skip those few cases where there are actually multiple entrez ids assigned to the same official gene symbol
 my $entrez_id_count = scalar(@entrez_ids);
 if ($entrez_id_count > 1){
   next();
 }
 #print SUMMARY "$entrez_symbol\t",join(",",@entrez_ids),"\n";
 unless ($entrez_symbol){
   print "\n\nDEBUG: $entrez_symbol";
   exit();
 }
 $Genes{$entrez_ids[0]}{'symbol'}=$entrez_symbol;
}

#Next, obtain list of entrez synonyms and their corresponding ids
foreach my $entrez_synonym (@entrez_synonyms){
 my @entrez_ids = keys %{$entrez_synonyms->{$entrez_synonym}->{entrez_ids}};
 #Don't allow (skip) synonyms which also happen to be symbols
 if ($entrez_symbols->{$entrez_synonym}){
  #print "synonym: $entrez_synonym with entrez id(s): ", join(",",@entrez_ids), " also appears as symbol for entrez id(s): ",join(",",keys %{$entrez_symbols->{$entrez_synonym}->{entrez_ids}}),"\n";
  next();
 }
 #Skip cases where there are multiple entrez ids assigned to the same synonym
 my $entrez_id_count = scalar(@entrez_ids);
 if ($entrez_id_count>1){next();}
 #Skip cases where there isn't a symbol associated with the entrez id for this synonym (can occur for symbols that were exluded above for belonging to multiple ids)
 #unless(defined($Genes{$entrez_ids[0]}{'symbol'})){
 unless(defined($Genes{$entrez_ids[0]})){
  print "No symbol found for $entrez_synonym ($entrez_ids[0])\n";
  next();
 }

 #print "$entrez_synonym\t",join(",",@entrez_ids),"\n";
 $Genes{$entrez_ids[0]}{'synonym'}{$entrez_synonym}++;
}

#For each gene (and its unambiguous synonyms) perform a search query
my $rc = 0;
foreach my $geneid (sort keys %Genes){
 $rc++;
 if ($rc > $record_limit && $debug){
  last();
 }
 #Create array of query terms for the gene ID (symbol + all synonyms)
 my @queries;
 my $symbol=$Genes{$geneid}{'symbol'};
 push (@queries, $symbol);
 if (keys %{$Genes{$geneid}{'synonym'}}){
  my @synonyms=keys %{$Genes{$geneid}{'synonym'}};
  push(@queries, @synonyms);
 }
 foreach my $queryterm (@queries){
  my ($score,$condition_summary,$nct_id,$order,$url,$title);
  $score = $condition_summary = $nct_id = $order = $url = $title = 'NA';

  #Skip queries already in result file
  if ($restart){
   if ($existing{$geneid} && $existing{$geneid}{$queryterm}){
   print BLUE, "\nSkipping existing query of clinicaltrials.gov for term (gene id): $queryterm ($geneid)", RESET;
   next();
   }
  }
  #Skip queries with problem characters that will mess up url
  if ($queryterm=~/[\#\[\]]/){
   print BLUE, "\nSkipping problem query of clinicaltrials.gov for term (gene id): $queryterm ($geneid)", RESET;
   print SUMMARY "$geneid\t$queryterm\t$nct_id\t$order\t$score\t$title\t$condition_summary\t$url\n";
   next();
  }
  #Skip queries with terms that confuse clinicaltrials search
  if ($queryterm eq 'NOT' || $queryterm eq 'AND' || $queryterm eq 'OR'){
   print BLUE, "\nSkipping problem query of clinicaltrials.gov for term (gene id): $queryterm ($geneid)", RESET;
   print SUMMARY "$geneid\t$queryterm\t$nct_id\t$order\t$score\t$title\t$condition_summary\t$url\n";
   next();
  }
  #Skip queries for terms in black list
  if ($blacklist_file){
    if ($blacklist{$queryterm}){
      print BLUE, "\nSkipping blacklist query of clinicaltrials.gov for term (gene id): $queryterm ($geneid)", RESET;
      print SUMMARY "$geneid\t$queryterm\t$nct_id\t$order\t$score\t$title\t$condition_summary\t$url\n";
      next();
    }
  }

  #Skip queries where term is not at least 3 characters long
  unless (length($queryterm)>2){
   print BLUE, "\nSkipping short query of clinicaltrials.gov for term (gene id): $queryterm ($geneid)", RESET;
   print SUMMARY "$geneid\t$queryterm\t$nct_id\t$order\t$score\t$title\t$condition_summary\t$url\n";
   next();
  }

  print BLUE, "\nAttempting query of clinicaltrials.gov for term (gene id): $queryterm ($geneid)", RESET;
  my $queryresult = &queryClinTrials('-queryterm'=>$queryterm);
  #print Dumper ($queryresult);

  #Extract information of interest from xml object
  my $result_count = $queryresult->{'count'};
  print " -> $result_count results";
  if ($result_count==1){
   my $clinical_study = $queryresult->{'clinical_study'};
   #print Dumper ($clinical_study);
    $score=$clinical_study->{'score'};
    $condition_summary=$clinical_study->{'condition_summary'};
    $nct_id=$clinical_study->{'nct_id'};
    $order=$clinical_study->{'order'};
    $url=$clinical_study->{'url'};
    $title=$clinical_study->{'title'};
    print SUMMARY "$geneid\t$queryterm\t$nct_id\t$order\t$score\t$title\t$condition_summary\t$url\n";
  }elsif ($result_count>1){
   my @clinical_studies = @{$queryresult->{'clinical_study'}};
   #print Dumper (@clinical_studies);
   foreach my $clinical_study (@clinical_studies){
    $score=$clinical_study->{'score'};
    $condition_summary=$clinical_study->{'condition_summary'};
    $nct_id=$clinical_study->{'nct_id'};
    $order=$clinical_study->{'order'};
    $url=$clinical_study->{'url'};
    $title=$clinical_study->{'title'};
    print SUMMARY "$geneid\t$queryterm\t$nct_id\t$order\t$score\t$title\t$condition_summary\t$url\n";
   }
  }else{
   print SUMMARY "$geneid\t$queryterm\t$nct_id\t$order\t$score\t$title\t$condition_summary\t$url\n";
  }
 }
}

print "\n\n";
close SUMMARY;

exit();


###################################################################################################
#Query clinicaltrials.gov with query term                                                         #
###################################################################################################
sub queryClinTrials{
  my %args = @_;
  my $queryterm = $args{'-queryterm'};

  #Create an LWP object
  my $browser = LWP::UserAgent->new;

  #Base URL for clinicaltrials.gov
  my $base_url = "http://clinicaltrials.gov/";
  
  #Construct query: Search for query term in all fields, restrict to interventional studies with "Drug" in the treatment field
  #my $query_url = $base_url."search?term=".$queryterm."&displayxml=true&count=500000&start=0";
  my $query_url = $base_url."search?term=".$queryterm."+[ALL-FIELDS]+AND+Interventional+[STUDY-TYPES]+AND+Drug+[TREATMENT]&displayxml=true&count=500000&start=0";

  #Run query
  my $response;
  my $attempts=0;
  do{
    $attempts++;
    $response = $browser->get($query_url);
   unless($response->is_success){
     print "Can't get $query_url -- ", $response->status_line, "trying again\n";
     sleep(1);
   }
  }until($response->is_success || $attempts>10);

  #Die if it could not be reached
  #die "Can't get $query_url -- ", $response->status_line unless $response->is_success;

  #Grab the actual xml content of this page:
  my $queryxml = $response->content;

  #Instantiate an XML simple object
  my $xs1 = XML::Simple->new();
  my $xml = $xs1->XMLin($queryxml, KeyAttr => ['query'] );

 return($xml);
}

